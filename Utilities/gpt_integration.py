import openai
from dotenv import dotenv_values

class GPTCodeReview:
    """
    A class to handle interactions with the OpenAI GPT API for code reviews.
    """

    def __init__(self):
        self.config = dotenv_values(".env")
        openai.api_key = self.config['OPEN_AI_KEY']

    def generate_feedback(self, code, language):
        """
        Generates feedback for the given code using the GPT model.
        Arguments:
        code -- The code to be reviewed.
        language -- The programming language of the code.
        Returns:
        The feedback generated by the GPT model.
        """
        try:
            prompt = (
                f"Review the following {language} code and provide feedback:\n\n{code}\n\n"
                "Feedback:\n"
                "Review criteria:\n"
                "- Check for coding standards and best practices.\n"
                "- Identify potential bugs and vulnerabilities.\n"
                "- Suggest improvements for code readability and maintainability.\n"
                "- Provide comments on code efficiency and performance.\n"
                "The system should return a detailed review report highlighting:\n"
                "- Line-by-line comments.\n"
                "- Overall summary of the code quality.\n"
                "- Suggestions for improvement.\n"
                "- Detected issues with severity levels.\n"
            )
            response = openai.ChatCompletion.create(
                model="gpt-4",
                messages=[{"role": "user", "content": prompt}],
            )
            return response.choices[0].message['content']
        except Exception as e:
            print(f"Error generating code review: {e}")

    def generate_feedback_report(self, code, language):
        """
        Generates a detailed feedback report.
        Arguments:
        code -- The code to be reviewed.
        language -- The programming language of the code.
        Returns:
        A detailed feedback report.
        """
        feedback = self.generate_feedback(code, language)
        report = f"Code Review Report for {language.capitalize()} Code:\n\n"
        report += feedback
        return report
